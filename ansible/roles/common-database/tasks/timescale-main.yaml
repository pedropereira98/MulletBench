---
- name: Set default port if not defined
  ansible.builtin.set_fact:
    timescale_port: 5432
  when: timescale_port is undefined


- name: Ensure /tmp/timescaledb dir exists
  ansible.builtin.file:
    path: /tmp/timescaledb/
    state: directory
    mode: '777'
  become: true

- name: Ensure /tmp/timescaledb/{{ inventory_hostname }} dir exists
  ansible.builtin.file:
    path: /tmp/timescaledb/{{ inventory_hostname }}
    state: directory
    mode: '777'
  become: true

- name: Copy compose file to remote
  ansible.builtin.template:
    src: templates/timescaledb-compose.yaml.j2
    dest: /tmp/timescaledb/{{ inventory_hostname }}/compose.yaml
    mode: '0500'

- name: Launch TimescaleDB instance
  community.docker.docker_compose:
    project_src: /tmp/timescaledb/{{ inventory_hostname }}/
    state: present
    remove_orphans: true

# - name: Create database
#   community.docker.docker_container_exec:
#     container: "timescale-{{ inventory_hostname }}"
#     command: psql -U postgres -c "create database mulletbench;"
#   register: create_database
#   failed_when: "'already exists' not in create_database.stderr and create_database.rc != 0"
#   changed_when: "'already exists' not in create_database.stderr"

- name: Wait for instance to be ready
  ansible.builtin.wait_for:
    port: "{{ timescale_port }}"
    state: started
    delay: 5

- name: Create sensors table
  community.docker.docker_container_exec:
    container: "timescale-{{ inventory_hostname }}"
    command: psql -U postgres -c "CREATE TABLE sensors (
                        id SERIAL PRIMARY KEY,
                        name TEXT NOT NULL
                    )"
  register: create_sensors_table
  failed_when: "'already exists' not in create_sensors_table.stderr and create_sensors_table.rc != 0"
  changed_when: "'already exists' not in create_sensors_table.stderr"

- name: Create sensor data hypertable
  community.docker.docker_container_exec:
      container: "timescale-{{ inventory_hostname }}"
      command: psql -U postgres -c "CREATE TABLE {{ timescale_table_name }}(
                        time TIMESTAMP NOT NULL,
                        device_id TEXT NOT NULL,
                        sensor_id INTEGER REFERENCES sensors (id),
                        value DOUBLE PRECISION
                    ); SELECT create_hypertable('sensor_data', by_range('time', INTERVAL '60 minutes'));"
  register: create_data_table
  failed_when: "'already exists' not in create_data_table.stderr and create_data_table.rc != 0"
  changed_when: "'already exists' not in create_data_table.stderr"